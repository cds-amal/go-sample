// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/dinregistry/interface.go

// Package dinregistry is a generated GoMock package.
package dinregistry

import (
	big "math/big"
	reflect "reflect"

	go_web3 "github.com/chenzhijie/go-web3"
	gomock "github.com/golang/mock/gomock"
)

// MockIDinRegistryHandler is a mock of IDinRegistryHandler interface.
type MockIDinRegistryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIDinRegistryHandlerMockRecorder
}

// MockIDinRegistryHandlerMockRecorder is the mock recorder for MockIDinRegistryHandler.
type MockIDinRegistryHandlerMockRecorder struct {
	mock *MockIDinRegistryHandler
}

// NewMockIDinRegistryHandler creates a new mock instance.
func NewMockIDinRegistryHandler(ctrl *gomock.Controller) *MockIDinRegistryHandler {
	mock := &MockIDinRegistryHandler{ctrl: ctrl}
	mock.recorder = &MockIDinRegistryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDinRegistryHandler) EXPECT() *MockIDinRegistryHandlerMockRecorder {
	return m.recorder
}

// GetAllEndpointCollections mocks base method.
func (m *MockIDinRegistryHandler) GetAllEndpointCollections() ([]EndpointCollection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllEndpointCollections")
	ret0, _ := ret[0].([]EndpointCollection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllEndpointCollections indicates an expected call of GetAllEndpointCollections.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllEndpointCollections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllEndpointCollections", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllEndpointCollections))
}

// GetAllMethodsByEndpointCollection mocks base method.
func (m *MockIDinRegistryHandler) GetAllMethodsByEndpointCollection(endpointCollection string) ([]Method, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMethodsByEndpointCollection", endpointCollection)
	ret0, _ := ret[0].([]Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMethodsByEndpointCollection indicates an expected call of GetAllMethodsByEndpointCollection.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllMethodsByEndpointCollection(endpointCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMethodsByEndpointCollection", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllMethodsByEndpointCollection), endpointCollection)
}

// GetAllProviders mocks base method.
func (m *MockIDinRegistryHandler) GetAllProviders() ([]ProviderHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllProviders")
	ret0, _ := ret[0].([]ProviderHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllProviders indicates an expected call of GetAllProviders.
func (mr *MockIDinRegistryHandlerMockRecorder) GetAllProviders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllProviders", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetAllProviders))
}

// GetEndpointCollectionCapabilities mocks base method.
func (m *MockIDinRegistryHandler) GetEndpointCollectionCapabilities(endpointCollection string) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointCollectionCapabilities", endpointCollection)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointCollectionCapabilities indicates an expected call of GetEndpointCollectionCapabilities.
func (mr *MockIDinRegistryHandlerMockRecorder) GetEndpointCollectionCapabilities(endpointCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointCollectionCapabilities", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetEndpointCollectionCapabilities), endpointCollection)
}

// GetProvidersByEndpointCollection mocks base method.
func (m *MockIDinRegistryHandler) GetProvidersByEndpointCollection(endpointCollection string) ([]ProviderHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProvidersByEndpointCollection", endpointCollection)
	ret0, _ := ret[0].([]ProviderHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProvidersByEndpointCollection indicates an expected call of GetProvidersByEndpointCollection.
func (mr *MockIDinRegistryHandlerMockRecorder) GetProvidersByEndpointCollection(endpointCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProvidersByEndpointCollection", reflect.TypeOf((*MockIDinRegistryHandler)(nil).GetProvidersByEndpointCollection), endpointCollection)
}

// ListAllMethodsByEndpointCollection mocks base method.
func (m *MockIDinRegistryHandler) ListAllMethodsByEndpointCollection(endpointCollection string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllMethodsByEndpointCollection", endpointCollection)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllMethodsByEndpointCollection indicates an expected call of ListAllMethodsByEndpointCollection.
func (mr *MockIDinRegistryHandlerMockRecorder) ListAllMethodsByEndpointCollection(endpointCollection interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllMethodsByEndpointCollection", reflect.TypeOf((*MockIDinRegistryHandler)(nil).ListAllMethodsByEndpointCollection), endpointCollection)
}

// MockIServiceHandler is a mock of IServiceHandler interface.
type MockIServiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceHandlerMockRecorder
}

// MockIServiceHandlerMockRecorder is the mock recorder for MockIServiceHandler.
type MockIServiceHandlerMockRecorder struct {
	mock *MockIServiceHandler
}

// NewMockIServiceHandler creates a new mock instance.
func NewMockIServiceHandler(ctrl *gomock.Controller) *MockIServiceHandler {
	mock := &MockIServiceHandler{ctrl: ctrl}
	mock.recorder = &MockIServiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceHandler) EXPECT() *MockIServiceHandlerMockRecorder {
	return m.recorder
}

// GetCapabilities mocks base method.
func (m *MockIServiceHandler) GetCapabilities() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockIServiceHandlerMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockIServiceHandler)(nil).GetCapabilities))
}

// IsMethodSupported mocks base method.
func (m *MockIServiceHandler) IsMethodSupported(bit uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMethodSupported", bit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMethodSupported indicates an expected call of IsMethodSupported.
func (mr *MockIServiceHandlerMockRecorder) IsMethodSupported(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMethodSupported", reflect.TypeOf((*MockIServiceHandler)(nil).IsMethodSupported), bit)
}

// ListMethods mocks base method.
func (m *MockIServiceHandler) ListMethods() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMethods")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMethods indicates an expected call of ListMethods.
func (mr *MockIServiceHandlerMockRecorder) ListMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMethods", reflect.TypeOf((*MockIServiceHandler)(nil).ListMethods))
}

// MockIEndpointCollectionHandler is a mock of IEndpointCollectionHandler interface.
type MockIEndpointCollectionHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIEndpointCollectionHandlerMockRecorder
}

// MockIEndpointCollectionHandlerMockRecorder is the mock recorder for MockIEndpointCollectionHandler.
type MockIEndpointCollectionHandlerMockRecorder struct {
	mock *MockIEndpointCollectionHandler
}

// NewMockIEndpointCollectionHandler creates a new mock instance.
func NewMockIEndpointCollectionHandler(ctrl *gomock.Controller) *MockIEndpointCollectionHandler {
	mock := &MockIEndpointCollectionHandler{ctrl: ctrl}
	mock.recorder = &MockIEndpointCollectionHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEndpointCollectionHandler) EXPECT() *MockIEndpointCollectionHandlerMockRecorder {
	return m.recorder
}

// AllMethods mocks base method.
func (m *MockIEndpointCollectionHandler) AllMethods() ([]Method, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllMethods")
	ret0, _ := ret[0].([]Method)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllMethods indicates an expected call of AllMethods.
func (mr *MockIEndpointCollectionHandlerMockRecorder) AllMethods() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllMethods", reflect.TypeOf((*MockIEndpointCollectionHandler)(nil).AllMethods))
}

// GetCapabilities mocks base method.
func (m *MockIEndpointCollectionHandler) GetCapabilities() (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCapabilities")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCapabilities indicates an expected call of GetCapabilities.
func (mr *MockIEndpointCollectionHandlerMockRecorder) GetCapabilities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCapabilities", reflect.TypeOf((*MockIEndpointCollectionHandler)(nil).GetCapabilities))
}

// GetMethodId mocks base method.
func (m *MockIEndpointCollectionHandler) GetMethodId(name string) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethodId", name)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodId indicates an expected call of GetMethodId.
func (mr *MockIEndpointCollectionHandlerMockRecorder) GetMethodId(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodId", reflect.TypeOf((*MockIEndpointCollectionHandler)(nil).GetMethodId), name)
}

// GetMethodName mocks base method.
func (m *MockIEndpointCollectionHandler) GetMethodName(bit uint8) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMethodName", bit)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodName indicates an expected call of GetMethodName.
func (mr *MockIEndpointCollectionHandlerMockRecorder) GetMethodName(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodName", reflect.TypeOf((*MockIEndpointCollectionHandler)(nil).GetMethodName), bit)
}

// IsMethodSupported mocks base method.
func (m *MockIEndpointCollectionHandler) IsMethodSupported(bit uint8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMethodSupported", bit)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMethodSupported indicates an expected call of IsMethodSupported.
func (mr *MockIEndpointCollectionHandlerMockRecorder) IsMethodSupported(bit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMethodSupported", reflect.TypeOf((*MockIEndpointCollectionHandler)(nil).IsMethodSupported), bit)
}

// MockIProviderHandler is a mock of IProviderHandler interface.
type MockIProviderHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIProviderHandlerMockRecorder
}

// MockIProviderHandlerMockRecorder is the mock recorder for MockIProviderHandler.
type MockIProviderHandlerMockRecorder struct {
	mock *MockIProviderHandler
}

// NewMockIProviderHandler creates a new mock instance.
func NewMockIProviderHandler(ctrl *gomock.Controller) *MockIProviderHandler {
	mock := &MockIProviderHandler{ctrl: ctrl}
	mock.recorder = &MockIProviderHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProviderHandler) EXPECT() *MockIProviderHandlerMockRecorder {
	return m.recorder
}

// AllServices mocks base method.
func (m *MockIProviderHandler) AllServices() ([]ServiceHandler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllServices")
	ret0, _ := ret[0].([]ServiceHandler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllServices indicates an expected call of AllServices.
func (mr *MockIProviderHandlerMockRecorder) AllServices() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllServices", reflect.TypeOf((*MockIProviderHandler)(nil).AllServices))
}

// Name mocks base method.
func (m *MockIProviderHandler) Name() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Name indicates an expected call of Name.
func (mr *MockIProviderHandlerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIProviderHandler)(nil).Name))
}

// Owner mocks base method.
func (m *MockIProviderHandler) Owner() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Owner indicates an expected call of Owner.
func (mr *MockIProviderHandlerMockRecorder) Owner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockIProviderHandler)(nil).Owner))
}

// MockIContractHandler is a mock of IContractHandler interface.
type MockIContractHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIContractHandlerMockRecorder
}

// MockIContractHandlerMockRecorder is the mock recorder for MockIContractHandler.
type MockIContractHandlerMockRecorder struct {
	mock *MockIContractHandler
}

// NewMockIContractHandler creates a new mock instance.
func NewMockIContractHandler(ctrl *gomock.Controller) *MockIContractHandler {
	mock := &MockIContractHandler{ctrl: ctrl}
	mock.recorder = &MockIContractHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractHandler) EXPECT() *MockIContractHandlerMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockIContractHandler) Call(method string, args ...interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{method}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockIContractHandlerMockRecorder) Call(method interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{method}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockIContractHandler)(nil).Call), varargs...)
}

// GetWeb3Object mocks base method.
func (m *MockIContractHandler) GetWeb3Object() *go_web3.Web3 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeb3Object")
	ret0, _ := ret[0].(*go_web3.Web3)
	return ret0
}

// GetWeb3Object indicates an expected call of GetWeb3Object.
func (mr *MockIContractHandlerMockRecorder) GetWeb3Object() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeb3Object", reflect.TypeOf((*MockIContractHandler)(nil).GetWeb3Object))
}
